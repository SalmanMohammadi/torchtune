# Config for single device full finetuning in full_finetune_single_device.py
# using a Mistral 7B model
#
# This config uses hyperparameters based on small set of experiments and information
# available on various forums. These are not meant to replicate the numbers
# from the paper
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download mistralai/Mistral-7B-v0.1 --hf-token <HF_TOKEN> --output-dir /tmp/Mistral-7B-v0.1
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config mistral/7B_full_low_memory
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config mistral/7B_full_low_memory checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

# Tokenizer
tokenizer:
  _component_: torchtune.models.mistral.mistral_tokenizer
  path:  ${output_dir}/tokenizer.model

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.mistral.mistral_test_lm_value_head

reward_model:
  _component_: torchtune.models.mistral.mistral_test_lm_value_head

checkpointer:
  _component_: torchtune.utils.FullModelTorchTuneCheckpointer
  checkpoint_dir: ${output_dir}
  checkpoint_files: [
    "mistral_test_lm_value_head.pt"
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: MISTRAL_REWARD

reward_checkpointer:
  _component_: torchtune.utils.FullModelTorchTuneCheckpointer
  checkpoint_dir: ${output_dir}
  checkpoint_files: [
    "mistral_test_lm_value_head.pt"
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: MISTRAL_REWARD
resume_from_checkpoint: False
output_dir: target/

# Fine-tuning arguments
batch_size: 2
num_steps: 10000
ppo_epochs: 4
ppo_batch_size: 2
ppo_backward_batch_size: 2
gradient_accumulation_steps: 1

optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.01
  lr: 3e-4

lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training env
device: mps

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: fp32

# Model compilation
compile: False

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}

log_every_n_steps: 1
log_peak_memory_stats: False


profiler:
  _component_: torchtune.utils.profiler
  enabled: False
  output_dir: ${output_dir}/torchtune_perf_tracing.json
