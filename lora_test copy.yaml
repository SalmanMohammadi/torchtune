# Config for single device full finetuning in full_finetune_single_device.py
# using a Mistral 7B model
#
# This config uses hyperparameters based on small set of experiments and information
# available on various forums. These are not meant to replicate the numbers
# from the paper
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download mistralai/Mistral-7B-v0.1 --hf-token <HF_TOKEN> --output-dir /tmp/Mistral-7B-v0.1
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config mistral/7B_full_low_memory
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config mistral/7B_full_low_memory checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path:  ./target/dummy/tokenizer.model


# Dataset
dataset:
  _component_: torchtune.datasets.text_completion_dataset
  source: trl-internal-testing/sentiment-trl-style
  max_seq_len: null
  split: train
  column: prompt

seed: null
shuffle: True

# Model Arguments
policy:
  _component_: torchtune.models.llama2.testing.llama2
  # lora_attn_modules: ['q_proj', 'v_proj']
  # apply_lora_to_mlp: False
  # apply_lora_to_output: False
  # lora_rank: 64
  # lora_alpha: 128
  # max_seq_len: 256

value_model:
  _component_: torchtune.models.llama2.testing.llama2_classifier
  # max_seq_len: 256

reward_model:
  _component_: torchtune.models.llama2.testing.llama2_classifier
  # max_seq_len: 256


checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: ./target/dummy
  checkpoint_files: [
      "pytorch_model.bin",
      # "tune_model_no_lora.pt"
  ]
  recipe_checkpoint: null
  adapter_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA2

reward_checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir:  ./target/dummy_reward/
  checkpoint_files: [
      # "hf_model_0001_tune_model.pt"
      "model.safetensors"
  ]
  output_dir: ${output_dir}/
  model_type: MISTRAL_REWARD


resume_from_checkpoint: False
output_dir: ./target/dummy/output

initialise_value_head_from_reward_model: True

# Fine-tuning arguments
batch_size: 512
num_steps: 100000
ppo_epochs: 4
ppo_batch_size: 256
# ppo_backward_batch_size: 8
gradient_accumulation_steps: 16
whiten_rewards: False
compile: False

# Generation arguments
forward_batch_size: 32
max_generated_tokens: 58
temperature: 0.7
top_k: null

# Reward masking args
min_response_length: 18
penalise_no_eos: True
reward_penalty: -3
stop_token_ids: [
  # 2,
  29889
]
  # 29889

# KL controller arguments
# kl_controller:
#   _component_: torchtune.utils.ppo_utils.AdaptiveKLController
#   init_kl_coef: 0.15
#   kl_target: 6
#   kl_horizon: 10000

# or
kl_controller:
  _component_: torchtune.utils.ppo_utils.FixedKLController
  kl_coef: 0.01

# optimizer:
#   _component_: bitsandbytes.optim.PagedAdamW
#   lr: 3e-4
# optimizer_in_bwd: True

optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.01
  lr: 3e-6

loss:
  _component_: torchtune.modules.loss.PPOLoss
  gamma: 1
  lmbda: 0.95
  epsilon: 0.2
  value_coeff: 0.1
  value_clip_range: 0.2

# Training env
device: mps

# Memory management
enable_activation_checkpointing: False

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  # _component_: torchtune.utils.metric_logging.StdoutLogger
  # log_dir: ${output_dir}
  _component_: torchtune.utils.metric_logging.WandBLogger
  project: torchtune_ppo


num_sample_generations: 1
log_every_n_steps: 1
log_peak_memory_stats: False


profiler:
  _component_: torchtune.utils.profiler
  enabled: False
  output_dir: ${output_dir}/torchtune_perf_tracing.json
