# Config for single device RLHF full finetuning using PPO in ppo_full_finetune_single_device.py
# using a TinyLlama2 1B model.
#
# This config uses hyperparameters based on small set of experiments and information
# available from existing implementations.
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download TinyLlama/TinyLlama_v1.1 --hf-token <HF_TOKEN> --output-dir /tmp/TinyLlama_v1.1
#   tune download smohammadi/tinyllama_rm_sentiment_1b  --hf-token <HF_TOKEN> --output-dir /tmp/tinyllama_rm_sentiment_1b --ignore-patterns ""

# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run ppo_full_finetune_single_device --config llama2/1B_full_ppo_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config mistral/7B_full_low_memory checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path:  ./target/dummy/tokenizer.model


# Dataset
dataset:
  _component_: torchtune.datasets.text_completion_dataset
  source: trl-internal-testing/sentiment-trl-style
  max_seq_len: null
  split: train
  column: prompt
  add_eos: False

seed: null
shuffle: True

policy_model:
  _component_: torchtune.models.llama2.llama2
  vocab_size: 32000
  num_layers: 22
  num_heads: 32
  num_kv_heads: 4
  embed_dim: 2048
  max_seq_len: 2048
  intermediate_dim: 5632
  attn_dropout: 0.0
  norm_eps: 1e-5

reward_and_value_model:
  _component_: torchtune.models.llama2.llama2_classifier
  num_classes: 1
  vocab_size: 32000
  num_layers: 22
  num_heads: 32
  num_kv_heads: 4
  embed_dim: 2048
  max_seq_len: 2048
  intermediate_dim: 5632
  attn_dropout: 0.0
  norm_eps: 1e-5

# checkpointer for the policy model - update this if resuming from checkpoint
checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: ./target/dummy
  checkpoint_files: [
      "pytorch_model.bin",
  ]
  # this is the only place where you should update `recipe_checkpoint` if resuming training
  recipe_checkpoint: null
  output_dir: ${output_dir} / policy
  model_type: LLAMA2

# this should be setup identically to the policy model checkpointer at the start of training
# ensure `checkpoint_files` always points to the original policy weights, even if resuming training
ref_policy_checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: ./target/dummy
  checkpoint_files: [
      "pytorch_model.bin",
  ]
  output_dir: ${output_dir}
  model_type: LLAMA2

# checkpointer for the value model - update this if resuming from checkpoint
# since this model will be identical to the reward model it's helpful to initialise this
# from the trained reward model weights
value_checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir:  ./target/dummy_reward/
  # only `checkpoint_files` need to be updated if resuming training
  checkpoint_files: [
      "model.safetensors"
  ]
  output_dir: ${output_dir} / value
  model_type: MISTRAL_REWARD

# checkpointer for the reward model, ensure `checkpoint_files`
# always points to the original reward model weights, even if resuming training
reward_checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir:  ./target/dummy_reward/
  checkpoint_files: [
      "model.safetensors"
  ]
  output_dir: ${output_dir}/
  model_type: MISTRAL_REWARD


resume_from_checkpoint: False
output_dir: ./target/dummy/output

# Fine-tuning arguments
batch_size: 32
num_steps: 100000
ppo_epochs: 2
ppo_batch_size: 16
# ppo_backward_batch_size: 8
gradient_accumulation_steps: 2
whiten_rewards: False
compile: False

# Generation arguments
forward_batch_size: 2
max_generated_tokens: 58
temperature: 0.7
top_k: null

# Reward masking args
min_response_length: 18
penalise_no_eos: True
reward_penalty: -3
stop_token_ids: [
  # 2,
  29889
]
  # 29889

kl_coeff: 0.01
# optimizer:
#   _component_: bitsandbytes.optim.PagedAdamW
#   lr: 3e-4
# optimizer_in_bwd: True

optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 2e-5
optimizer_in_bwd: True

loss:
  _component_: torchtune.modules.loss.PPOLoss
  gamma: 1
  lmbda: 0.95
  epsilon: 0.2
  value_coeff: 0.1
  value_clip_range: 0.2

# Training env
device: mps

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.StdoutLogger
  log_dir: ${output_dir}
  # _component_: torchtune.utils.metric_logging.WandBLogger
  # project: torchtune_ppo


num_sample_generations: 1
log_every_n_steps: 1
log_peak_memory_stats: False

profiler:
  _component_: torchtune.utils.profiler
  enabled: False
  output_dir: ${output_dir}/torchtune_perf_tracing.json
